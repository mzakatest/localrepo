---
- name: Install wordpress
  become: true
  hosts: db
  tasks:
    #Access check
    - name: make sure you can connect
      ansible.builtin.ping:
    #PHP
    - name: update package repo cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
    - name: Install php
      ansible.builtin.package:
        name: "{{ item }}"
        state: latest
      with_items:
        - php
        - php-fpm
        - php-mysql
        - php-xml
    - name: Remove apache
      ansible.builtin.package:
        name: apache2
        state: absent
    #MQSQL
    - name: Install php-mysql
      ansible.builtin.package:
        name: "{{ item }}"
        state: latest
      with_items:
        - mysql-server
        - python3-mysqldb
    - name: Generate new root password
      ansible.builtin.command: 
        cmd: openssl rand -hex 7
        creates: /root/.my.cnf
      register: mysql_new_root_pass
    - name: New root password is created
      # If /root/.my.cnf doesn't exist and the command is run
      ansible.builtin.debug: 
        msg: New root password is {{mysql_new_root_pass.stdout}}
      when: mysql_new_root_pass.changed
    - name: Output new root password
      # If /root/.my.cnf exists and the command is not run
      ansible.builtin.debug: 
        msg: No change to root password
      when: mysql_new_root_pass.changed
    - name: Removes all anonymous user accounts
      community.mysql.mysql_user:
        name: ''
        host_all: true
        state: absent
      when: mysql_new_root_pass.changed
    - name: Make sure there is no database with name test
      community.mysql.mysql_db:
        name: test
        state: absent
      when: mysql_new_root_pass.changed
    - name: Update root password
      community.mysql.mysql_user: 
        name: root 
        host: "{{ item }}"
        password: "{{mysql_new_root_pass.stdout}}"
        # password_expire: never
      with_items:
      - "{{ ansible_hostname}}"
      - 127.0.0.1
      - ::1
      - localhost
      when: mysql_new_root_pass.changed
    - name: Template a file to /root/.my.cnf
      ansible.builtin.template:
        src: templates/mysql/my.cnf
        dest: /root/.my.cnf
      when: mysql_new_root_pass.changed
    #NGINX
    - name: Install Nginx
      ansible.builtin.package:
        name: nginx
        state: latest
    - name: Start service nginx
      ansible.builtin.service:
        name: nginx
        state: started
        enabled: yes
    - name: Template a file to /etc/nginx/sitesavailable/default
      ansible.builtin.template:
        src: templates/nginx/default
        dest: /etc/nginx/sites-available/default
      notify: restart nginx
    #WORDPRESS
    #you can download wordpress yourself using "mkdir -p provisioning/files && curl https://wordpress.org/latest.zip > provisioning/files/wordpress.zip"
    # - name: Copy wordpress.zip into tmp
    #   ansible.builtin.copy: 
    #     src: files/wordpress.zip 
    #     dest: /tmp/wordpress.zip
    #download it automatically 
    - name: Get WordPress checksum
      ansible.builtin.uri:
        url: https://wordpress.org/latest.zip.sha1
        return_content: true
      register: wp_checksum
    - name: Download WordPress
      ansible.builtin.get_url:
        url: https://wordpress.org/latest.zip
        dest: /tmp/wordpress.zip
        checksum: "sha1:{{wp_checksum.content}}"
    - name: Install unzip
      ansible.builtin.package:
        name: unzip
        state: latest
    - name: Extract wordpress latest.zip      
      ansible.builtin.unarchive:
        src: /tmp/wordpress.zip
        dest: /tmp
        copy: no
        creates: /tmp/wordpress/wp-settings.php
    - name: Create a directory for wordpress
      ansible.builtin.file:
        path: /var/www/{{ansible_hostname}}
        state: directory
    - name: Copy wordpress content
      ansible.builtin.command: 
        cmd: cp -r /tmp/wordpress/. /var/www/{{ansible_hostname}}/
        creates: /var/www/{{ansible_hostname}}/wp-settings.php
    #MYSQL USER FOR WORDPRESS WITH PASSWORD bananas
    - name: Create a new database with name 'wordpress'
      community.mysql.mysql_db:
        name: wordpress
        state: present
    - name: Create a new database user with name 'wordpress' and password 'bananas'
      community.mysql.mysql_user:
        name: wordpress
        host: localhost
        password: bananas
        priv: wordpress.*:ALL
        state: present
        column_case_sensitive: true
    - name: Create wp-config
      ansible.builtin.template:
        src: templates/wordpress/wp-config.php
        dest: /var/www/{{ansible_hostname}}/wp-config.php
    #get database imported from backup or dump
    - name: Does the database exist?
      ansible.builtin.command: 
        cmd: mysql -u root wordpress -e "SELECT ID FROM wordpress.wp_users LIMIT 1;"
      register: db_exist
      ignore_errors: true
      changed_when: db_exist.rc != 0 
    - name: Copy WordPress DB
      ansible.builtin.copy: 
        src: files/wp-database.sql 
        dest: /tmp/wp-database.sql
      when: db_exist.rc > 0
    - name: Import WordPress DB
      community.mysql.mysql_db: 
        target: /tmp/wp-database.sql 
        state: import 
        name: wordpress
      when: db_exist.rc > 0
  handlers:
    - name: restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted